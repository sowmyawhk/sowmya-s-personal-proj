/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Spot } from "./Spot";
import { SpotCountArgs } from "./SpotCountArgs";
import { SpotFindManyArgs } from "./SpotFindManyArgs";
import { SpotFindUniqueArgs } from "./SpotFindUniqueArgs";
import { CreateSpotArgs } from "./CreateSpotArgs";
import { UpdateSpotArgs } from "./UpdateSpotArgs";
import { DeleteSpotArgs } from "./DeleteSpotArgs";
import { SpotService } from "../spot.service";
@graphql.Resolver(() => Spot)
export class SpotResolverBase {
  constructor(protected readonly service: SpotService) {}

  async _spotsMeta(
    @graphql.Args() args: SpotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Spot])
  async spots(@graphql.Args() args: SpotFindManyArgs): Promise<Spot[]> {
    return this.service.spots(args);
  }

  @graphql.Query(() => Spot, { nullable: true })
  async spot(@graphql.Args() args: SpotFindUniqueArgs): Promise<Spot | null> {
    const result = await this.service.spot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Spot)
  async createSpot(@graphql.Args() args: CreateSpotArgs): Promise<Spot> {
    return await this.service.createSpot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Spot)
  async updateSpot(@graphql.Args() args: UpdateSpotArgs): Promise<Spot | null> {
    try {
      return await this.service.updateSpot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Spot)
  async deleteSpot(@graphql.Args() args: DeleteSpotArgs): Promise<Spot | null> {
    try {
      return await this.service.deleteSpot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
