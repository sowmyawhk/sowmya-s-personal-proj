/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpotService } from "../spot.service";
import { SpotCreateInput } from "./SpotCreateInput";
import { Spot } from "./Spot";
import { SpotFindManyArgs } from "./SpotFindManyArgs";
import { SpotWhereUniqueInput } from "./SpotWhereUniqueInput";
import { SpotUpdateInput } from "./SpotUpdateInput";

export class SpotControllerBase {
  constructor(protected readonly service: SpotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Spot })
  async createSpot(@common.Body() data: SpotCreateInput): Promise<Spot> {
    return await this.service.createSpot({
      data: data,
      select: {
        createdAt: true,
        floor: true,
        id: true,
        spotPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Spot] })
  @ApiNestedQuery(SpotFindManyArgs)
  async spots(@common.Req() request: Request): Promise<Spot[]> {
    const args = plainToClass(SpotFindManyArgs, request.query);
    return this.service.spots({
      ...args,
      select: {
        createdAt: true,
        floor: true,
        id: true,
        spotPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Spot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async spot(
    @common.Param() params: SpotWhereUniqueInput
  ): Promise<Spot | null> {
    const result = await this.service.spot({
      where: params,
      select: {
        createdAt: true,
        floor: true,
        id: true,
        spotPrice: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Spot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpot(
    @common.Param() params: SpotWhereUniqueInput,
    @common.Body() data: SpotUpdateInput
  ): Promise<Spot | null> {
    try {
      return await this.service.updateSpot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          floor: true,
          id: true,
          spotPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Spot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpot(
    @common.Param() params: SpotWhereUniqueInput
  ): Promise<Spot | null> {
    try {
      return await this.service.deleteSpot({
        where: params,
        select: {
          createdAt: true,
          floor: true,
          id: true,
          spotPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
