/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Spot } from "@prisma/client";

export class SpotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SpotCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpotCountArgs>
  ): Promise<number> {
    return this.prisma.spot.count(args);
  }

  async spots<T extends Prisma.SpotFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpotFindManyArgs>
  ): Promise<Spot[]> {
    return this.prisma.spot.findMany(args);
  }
  async spot<T extends Prisma.SpotFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpotFindUniqueArgs>
  ): Promise<Spot | null> {
    return this.prisma.spot.findUnique(args);
  }
  async createSpot<T extends Prisma.SpotCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpotCreateArgs>
  ): Promise<Spot> {
    return this.prisma.spot.create<T>(args);
  }
  async updateSpot<T extends Prisma.SpotUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpotUpdateArgs>
  ): Promise<Spot> {
    return this.prisma.spot.update<T>(args);
  }
  async deleteSpot<T extends Prisma.SpotDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpotDeleteArgs>
  ): Promise<Spot> {
    return this.prisma.spot.delete(args);
  }
}
